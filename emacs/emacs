(add-to-list 'custom-theme-load-path (expand-file-name "~/.dotfiles/emacs/themes/"))
(load-theme 'nord t nil)
(cua-mode)
(ivy-mode)
(server-start)
(menu-bar-mode -1)
;; (toggle-scroll-bar -1)
;; (tool-bar-mode -1)
;; (display-line-numbers-mode 
(setq vc-follow-symlinks t)
(setq confirm-kill-emacs 'y-or-n-p)
(setq-default tab-width 4)
(electric-indent-mode -1)
(global-display-line-numbers-mode -1)
(setq split-window-threshold 110)
(setq copyright-year-ranges t)

(add-to-list 'load-path (expand-file-name "~/.dotfiles/emacs"))

;; nyan-mode looks better in X
;; (add-to-list 'load-path (expand-file-name "~/.dotfiles/emacs/nyan-mode"))
;; (require 'nyan-mode)
;; (nyan-mode 1)

;; Helm setup
(require 'helm-swoop)
(setq helm-multi-swoop-edit-save t)
(setq helm-swoop-split-with-multiple-windows nil)
(setq helm-swoop-split-direction 'split-window-vertically) ;;  'split-window-horizontally
(setq helm-imenu-split-direction 'split-window-vertically) ;;  'split-window-
(setq helm-swoop-speed-or-color t) ;; nil is faster
(setq helm-swoop-move-to-line-cycle t)
(setq helm-swoop-use-line-number-face t)
(setq helm-swoop-use-fuzzy-match t)
;; Always use the previous search
(setq helm-swoop-pre-input-function
      (lambda () (if (boundp 'helm-swoop-pattern)
                     helm-swoop-pattern "")))
(require 'helm-flx)
(setq helm-flx-for-helm-find-files t ;; t by default
      helm-flx-for-helm-locate t) ;; nil by default

(require 'go-mode)

(global-unset-key [(control x)(control z)])
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "M-i") 'helm-imenu)
(global-set-key (kbd "M-,") 'helm-ag-project-root)
(global-set-key (kbd "M-.") 'helm-ag)
(global-set-key (kbd "C-x g") 'magit)
(global-set-key (kbd "C-x b") 'helm-buffers-list)
(global-set-key (kbd "M-o") 'helm-occur)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-s") 'helm-swoop)
(global-set-key (kbd "M-s M-s") 'helm-multi-swoop-all)
;; because I'm sloppy
(global-set-key (kbd "C-f") 'helm-find-files)
(global-set-key (kbd "C-b") 'helm-buffers-list)
(global-set-key (kbd "C-x C-b") 'helm-buffers-list)
(global-set-key (kbd "M-p") 'helm-buffers-list) ;; right hand easy

(global-unset-key (kbd "M-c")) ;; sloppy and not useful

; org-mode transparent encryption
(epa-file-enable)
(setq epa-armor t) ; armor in ascii for mobile-org compat

(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
;; separate custom confs in .emacs.d/custom.el
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file) (load custom-file :noerror))
;; local confs in .emacs.d/local.el
(setq local-file (expand-file-name "local.el" user-emacs-directory))
(when (file-exists-p local-file) (load local-file :noerror))

;; spelling using hunspell (libreoffice engine)
(with-eval-after-load "ispell"
  (setenv "LANG" "en_US.UTF-8")
  (setq ispell-program-name "hunspell")
  (setq ispell-dictionary "en_GB")
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "en_GB")
  ;; For saving words to the personal dictionary, don't infer it from
  ;; the locale, otherwise it would save to ~/.hunspell_de_DE.
  (setq ispell-personal-dictionary
		(expand-file-name "hunspell_personal" user-emacs-directory))
  ;; The personal dictionary file has to exist, otherwise hunspell will
  ;; silently not use it.
  (unless (file-exists-p ispell-personal-dictionary)
	(write-region "" nil ispell-personal-dictionary nil 0))
  )
