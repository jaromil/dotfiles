
# When in WSL find our username on windows host
winuser() {
	if ! [ -d /mnt/c/Users ]; then return; fi
	cd /mnt/c/Users \
		&& /mnt/c/Windows/System32/cmd.exe /c echo %username% \
			| tr -d '\r'
	cd - > /dev/null
}
winhome() {
	echo "/mnt/c/Users/`winuser`"
}

find_emacs_path() {
	local withver=`ls '/c/Program Files/Emacs/' | grep '^emacs-'`
	local found="/c/Program Files/Emacs/${withver}/bin"
	[ -d "$found" ] && echo "$found"
}

mkdir -p "$HOME/bin"

# WSL specific: build and update an executable path to win (.exe)
# applications linked in the startupmenu directory
function wrap_exe() {
	if [ -r "$1" ]; then
		cat <<EOF > "$2"
#!/bin/sh
# this wrapper was generated by .dotfiles/system/startmenu
# on: `date`
arg="\$1"
if [ -r "\$1" ]; then # argument is a file
   arg=\`wslpath -w "\$1"\`
fi
"$1" "\$arg"
EOF
		chmod +x "$2"
	fi
}

function populate_startmenu() {
	local oldhash='new'
	if [ -r ~/.startmenu_hash ]; then
		oldhash=`cat ~/.startmenu_hash`; fi
	local newhash=`echo ${lnks} | sha1sum -z | cut -d' ' -f 1`
	if [ "$oldhash" != "new" ]; then
		if [ "$oldhash" == "$newhash" ]; then return; fi
	fi
	echo "Populating startmenu links..."
	if ! [ -d ${HOME}/bin ]; then
		mkdir ${HOME}/bin
		prepend-path ${HOME}/bin
	fi
	local tmp=`mktemp`
	while IFS= read -r line; do
		eval `lnkinfo "$line" | awk -F":" '
/Local path/ {  printf "path=\"C:%s\"", $3 }
'`
		echo `wslpath "$path"` >> $tmp
	done <<< ${lnks}
	local lnks=`sort $tmp | grep -i 'EXE$' | uniq | grep -iv setup | grep -iv update | grep -iv install `
	rm -f $tmp
	while IFS= read -r line; do
		local exe=`basename "$line" | tr [:upper:] [:lower:]`
		# echo " $exe -> $line"
		# ln -sf "$line" "${HOME}/bin/$exe"
		wrap_exe "$line" "${HOME}/bin/$exe"
	done <<< ${lnks}
	echo ${newhash} > ~/.startmenu_hash
}

# support WSL
WINUSER=`winuser`
[ "$WINUSER" == "" ] || {
  # startmenu in path
  if [ -d "/mnt/c/ProgramData/Microsoft/Windows/Start Menu/Programs" ]; then

	  if ! [ -d ${HOME}/StartMenu ]; then
		  ln -sf "/mnt/c/ProgramData/Microsoft/Windows/Start Menu/Programs" \
		     "${HOME}/StartMenu"
	  fi

	  if command -v lnkinfo > /dev/null; then
		  lnks=`find ~/StartMenu/ -maxdepth 2 -name '*.lnk'`
		  populate_startmenu ${lnks}
	  fi
  fi

  # handy aliases
  if [ -r "${HOME}/bin/msedge.exe" ]; then alias edge='msedge.exe'; fi
  if [ -r "${HOME}/bin/winword.exe" ]; then alias word='winword.exe'; fi

  # hardcode some
  wrap_exe /mnt/c/Windows/System32/notepad.exe ${HOME}/bin/notepad.exe
  wrap_exe /mnt/c/Windows/System32/calc.exe ${HOME}/bin/calculator.exe

  # clipboard util
  ln -sf "/mnt/c/Windows/System32/clip.exe" ${HOME}/bin/clip.exe

  # create symlinks to handy onedrive dirs
  exec 3>&2
  exec 2> /dev/null
  # (do stuff where you don't want to see the stderr.)
  upath="`winhome`"
  exec 2>&3
  if [ -d "$upath" ]; then

	  if ! [ -r "${HOME}/OneDrive" ]; then
		  if [ -r "${upath}/OneDrive" ]; then
			  echo "Creating home link to OneDrive ..."
			  ln -s "${upath}/OneDrive" "${HOME}/OneDrive"
			  if ! [ -r "${HOME}/Desktop" ]; then
				  ln -s "${HOME}/OneDrive/Desktop" "${HOME}/Desktop"; fi
		  fi
	  fi

	  linkdir() {	[ -r "${HOME}/$1" ] || ln -s "${upath}/$1" "${HOME}/$1"; }
	  linkdir "Downloads"
	  linkdir "Videos"
	  linkdir "AppData"

  fi
}

# support MINGW environments
uname | grep '^MINGW' >/dev/null && {
	[ -r /etc/profile ] && . /etc/profile
	export PATH="$PATH:/c/Program Files (x86)/GnuWin32/bin/"
	found=`find_emacs_path`
	[ "$found" == "" ] || {
		export PATH="$PATH:`find_emacs_path`"
		alias emacs='emacs.exe -nw'
	}
}

# that's all for now
